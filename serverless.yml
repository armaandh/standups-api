# The `service` block is the name of the service
service: serverless-dev

# Configuration variables
#custom:
  #secrets: ${file(env.json)}

# The `provider` block defines where your service will be deployed
provider:
  name: aws
  runtime: nodejs6.10
  region: us-east-1
  iamRoleStatements:
    $ref: ./iamRoleStatements.json

# Lambda Functions Below Defined for Standup API
functions:
  createTeam:
    handler: functions/createTeam.handler
    events:
      - http:
          path: createteam
          method: post
          cors: true
          #authorizer: aws_iam # Members are protected

  addChildTeam:
   handler: functions/addChildTeam.handler
   events:
     - http:
         path: addchildteam
         method: post
         cors: true
  #        authorizer: aws_iam # 
  teamInfo:
    handler: functions/teamInfo.handler
    events:
      - http:
          path: teaminfo
          method: post
          cors: true
          #authorizer: aws_iam # TODO: fixed cors
  createTeamMember:
    handler: functions/createTeamMember.handler
    events:
      - http:
          path: createteammember
          method: post
          cors: true
resources:
  Resources:
    TeamList:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: ID
            AttributeType: S
        KeySchema:
          -
            AttributeName: ID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: 'TeamList'
        
    TeamMembersList:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: TeamID
            AttributeType: S
          -
            AttributeName: ID
            AttributeType: S
        KeySchema:
          -
            AttributeName: TeamID
            KeyType: HASH
          -
            AttributeName: ID
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: 'TeamMembersList'

    TeamParentList:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: ParentID
            AttributeType: S
          -
            AttributeName: ID
            AttributeType: S
        KeySchema:
          -
            AttributeName: ParentID
            KeyType: HASH
          -
            AttributeName: ID
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: 'TeamParentList'

    UrlList:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: UserpoolTableDateID
            AttributeType: S
          -
            AttributeName: ID
            AttributeType: S
        KeySchema:
          -
            AttributeName: UserpoolTableDateID
            KeyType: HASH
          -
            AttributeName: ID
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: 'UrlList'

  AttachmentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      # Set the CORS policy
      CorsConfiguration:
        CorsRules:
          -
            AllowedOrigins:
              - '*'
            AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            MaxAge: 3000

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      # Generate a name based on the stage
      UserPoolName: standup-user-pool
      # Set email as an alias
      AliasAttributes:
        - email
      AutoVerifiedAttributes:
        - email

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      # Generate an app client name based on the stage
      ClientName: standup-user-pool-client
      UserPoolId:
        Ref: CognitoUserPool
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
      GenerateSecret: false

# Print out the name of the bucket that is created
Outputs:
  AttachmentsBucketName:
    Value:
      Ref: AttachmentsBucket

  UserPoolId:
    Value:
      Ref: CognitoUserPool

  UserPoolClientId:
    Value:
      Ref: CognitoUserPoolClient